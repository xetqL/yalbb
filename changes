
diff --git a/includes/yalbb/coordinate_translater.hpp b/includes/yalbb/coordinate_translater.hpp
index 3a7aa26..77eacbc 100644
--- a/includes/yalbb/coordinate_translater.hpp
+++ b/includes/yalbb/coordinate_translater.hpp
@@ -79,17 +79,17 @@ public:
     template<int N> static std::array<Integer, N>
     translate_position_into_xyz(const std::array<Real, N>& position, Real rc){
         std::array<Integer, N> ret;
+        std::transform(position.cbegin(), position.cend(), std::begin(ret), [rc](Real v){ return (Integer) ( (double) v / (double) rc ); });
         return ret;
     }
     template<int N> static std::array<Integer, N>
     translate_position_into_local_xyz(const std::array<Real, N>& position, const BoundingBox<N>& bbox, Real rc){
         std::array<Integer, N> ret;
         for(int i = 0; i<N; ++i) {
+           ret[i] = std::floor(((double) position[i] - (double) bbox[2*i]) / (double) rc);
         }
         return ret;
     }
diff --git a/includes/yalbb/ljpotential.hpp b/includes/yalbb/ljpotential.hpp
index 27c6606..2306de7 100644
--- a/includes/yalbb/ljpotential.hpp
+++ b/includes/yalbb/ljpotential.hpp
@@ -24,7 +24,11 @@ std::array<Real, N> lj_compute_force(const T* receiver, const T* source, Real ep
 
     const Real min_r2 = (rc*rc) / 10000.0;
 
    delta = std::max(delta, min_r2);


 
     const Real C_LJ = -compute_LJ_scalar(delta, eps, sig2, rc*rc);
 
diff --git a/includes/yalbb/params.hpp b/includes/yalbb/params.hpp
index c7bbf34..b2d5661 100644
--- a/includes/yalbb/params.hpp
+++ b/includes/yalbb/params.hpp
@@ -29,7 +29,7 @@ struct sim_param_t {
     float G;       /* Gravitational strength (1) */
     float T0;      /* Initial temperature (1)    */
     float simsize; /* Borders of the simulation  */
-    float rc;
+    float rc;      /* factor multiplying sigma for cutoff */
     bool  record;  /* record the simulation in a binary file */
     int   seed;    /* seed used in the RNG */
     int   particle_init_conf = 1;
diff --git a/includes/yalbb/utils.hpp b/includes/yalbb/utils.hpp
index f569312..b73f94d 100644
--- a/includes/yalbb/utils.hpp
+++ b/includes/yalbb/utils.hpp
@@ -18,9 +18,7 @@
 #include <random>
 #include <cstring>
 
-#ifdef DEBUG
-#define print(x) std::cout << (#x) <<" in "<< __FILE__ << ":"<<__LINE__<< " = " << (x) << std::endl;
-#endif
+#define debug(x) std::cout << (#x) <<" in "<< __FILE__ << ":"<<__LINE__<< " = " << (x) << std::endl;
 
 inline std::string get_date_as_string();
 bool file_exists(const std::string fileName);
@@ -190,7 +188,7 @@ template<int N>
 bool is_within(const BoundingBox<N>& bbox, std::array<Real, N>& xyz){
     bool within = true;
     for(int i = 0; i < N; i++){
+        within = within && (bbox[2*i] <= xyz[i]) && (xyz[i] < bbox[2*i+1]);
     }
     return within;
 }
@@ -252,10 +250,10 @@ BoundingBox<N> get_bounding_box(Real rc, GetPosFunc getPosFunc, T&... elementCon
 template<int N>
 inline std::array<Integer, N> get_cell_number_by_dimension(const BoundingBox<N>& bbox, Real rc) {
     std::array<Integer, N> lc;
+    lc [0] = std::ceil(get_size<0, N>(bbox) / rc);
+    lc [1] = std::ceil(get_size<1, N>(bbox) / rc);
     if constexpr(N==3)
+        lc [2] = std::ceil(get_size<2, N>(bbox) / rc);
     return lc;
 }
 
@@ -508,4 +506,4 @@ namespace statistic {
 } // end of namespace statistic
 
 
-#endif //NBMPI_UTILS_HPP
\ No newline at end of file
+#endif //NBMPI_UTILS_HPP
diff --git a/src/ljpotential.cpp b/src/ljpotential.cpp
index 7b36404..c900086 100644
--- a/src/ljpotential.cpp
+++ b/src/ljpotential.cpp
@@ -4,10 +4,12 @@
 #include "utils.hpp"
 
 Real compute_LJ_scalar(Real r2, Real eps, Real sig2, Real rc2) {
+    if (r2 < rc2) { /* r_cutoff = 2.5 *sigma */
         Real z = sig2 / r2;
         Real u = z * z * z;
-        return 24 * eps / r2 * u * (1 - 2 * u);
     }
     return 0;
-}
\ No newline at end of file
+}
diff --git a/src/params.cpp b/src/params.cpp
index 0cd0b31..1d7272c 100644
--- a/src/params.cpp
+++ b/src/params.cpp
@@ -12,11 +12,12 @@ void print_params(std::ostream& stream, const sim_param_t& params){
     stream << "= id: " << params.id << std::endl;
     stream << "= Simulation size: " << params.simsize << std::endl;
     stream << "= Number of time-steps: " << params.nframes << "x" << params.npframe << std::endl;
+    stream << "= Timestep: "<< params.dt << std::endl;
     stream << "= Initial conditions: " << std::endl;
     stream << "= SIG:" << params.sig_lj << std::endl;
     stream << "= EPS:  " << params.eps_lj << std::endl;
+    stream << "= Cut-off: "<< (params.rc) << std::endl;
     stream << "= Borders: collisions " << std::endl;
     stream << "= Temperature: " << params.T0 << std::endl;
     stream << "==============================================" << std::endl;
 }
@@ -37,7 +38,7 @@ std::optional<sim_param_t> get_params(int argc, char** argv){
     parser.add_opt_value('F', "nframes", params.nframes, 100, "number of frames", "INT").require();
     parser.add_opt_value('g', "gravitation", params.G, 1.0f, "Gravitational strength", "FLOAT");
     parser.add_opt_value('i', "id", params.id, 0, "Simulation id", "INT").require();
+    parser.add_opt_value('l', "lattice", params.rc, 2.5f, "Lattice size", "FLOAT");
     parser.add_opt_value('n', "nparticles", params.npart, 500, "Number of particles", "INT").require();
     parser.add_opt_flag('r', "record", "Record the simulation", &params.record);
     parser.add_opt_value('s', "siglj", params.sig_lj, 1e-2f, "Sigma (lennard-jones)", "FLOAT");
@@ -55,7 +56,7 @@ std::optional<sim_param_t> get_params(int argc, char** argv){
         std::cout << parser.get_help() << std::endl;
         return std::nullopt;
     }
-
+    params.rc *= params.sig_lj;
     params.verbosity = verbose.get_count();
     return params;
-}
\ No newline at end of file
+}
